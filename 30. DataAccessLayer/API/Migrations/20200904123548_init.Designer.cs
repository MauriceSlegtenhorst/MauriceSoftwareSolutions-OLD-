// <auto-generated />
using System;
using MTS.DAL.DatabaseAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MTS.BL.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200904123548_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MTS.DAL.Entities.Core.DALCredit", b =>
                {
                    b.Property<Guid>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GotFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MadeBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreditId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.DALUserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Affix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.EditPageContent.DALPageSection", b =>
                {
                    b.Property<Guid>("PageSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PageRoute")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PageSectionId");

                    b.ToTable("PageSections");

                    b.HasData(
                        new
                        {
                            PageSectionId = new Guid("7d8aa5ed-bb0a-4ca8-a9bf-46085cec9369"),
                            PageRoute = "Index"
                        },
                        new
                        {
                            PageSectionId = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            PageRoute = "Index"
                        });
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.EditPageContent.DALSectionPart", b =>
                {
                    b.Property<Guid>("SectionPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PageSectionFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionPartId");

                    b.HasIndex("PageSectionFK");

                    b.ToTable("SectionParts");

                    b.HasData(
                        new
                        {
                            SectionPartId = new Guid("17725189-47db-46dd-a582-3f4680d4e01a"),
                            Content = "<h4>About me and MSS</h4>",
                            PageSectionFK = new Guid("7d8aa5ed-bb0a-4ca8-a9bf-46085cec9369"),
                            Type = "Title1"
                        },
                        new
                        {
                            SectionPartId = new Guid("94aabd8d-5a57-40e6-ab24-90462c6cedc6"),
                            Content = "<strong>What is MSS?</strong>",
                            PageSectionFK = new Guid("7d8aa5ed-bb0a-4ca8-a9bf-46085cec9369"),
                            Type = "Header1"
                        },
                        new
                        {
                            SectionPartId = new Guid("0f37ae00-c67f-4832-bee8-7f1d51272c38"),
                            Content = "<p>Maurice Software Solutions was created to showcase my programming skills and to have some fun. Aside from that there is handy and fun functionality to be found like a fully-fledged, unlimited personal cloud storage system and a chatroom. And those are just the things I am currently working on. I am dedicated to improving Maurice Software Solutions as a whole regularly whilst adding cool new features.</p>",
                            PageSectionFK = new Guid("7d8aa5ed-bb0a-4ca8-a9bf-46085cec9369"),
                            Type = "Body1"
                        },
                        new
                        {
                            SectionPartId = new Guid("1e2c0185-8676-48e1-ba75-0c28bdf3a9f7"),
                            Content = "<strong>Who is Maurice?</strong>",
                            PageSectionFK = new Guid("7d8aa5ed-bb0a-4ca8-a9bf-46085cec9369"),
                            Type = "Header2"
                        },
                        new
                        {
                            SectionPartId = new Guid("dd2c5219-6dff-496b-975e-c7a2c234dabf"),
                            Content = @"<p>I am an enthusiastic man with a strong passion for programming. Social and friendly going. Coding has been my hobby from an early age. When I was 13, I made my first program in Visual Basic. A slot machine where there were secret options to get infinite money for example. Later, around the age of 18, I started working with Java, XML and Android Studio. With this I built a number of Android apps including an applocker. This app allowed the user to choose which apps and services needed an additional password or fingerprint to be used.</p>
<p>Friends and especially family regularly ask me for help with electronics and software related matters. I think this is because I have been busy with software and hardware practically my whole life.</p>
<p>Marketing and commerce seemed to be my career choice for a long time. During my higher professional education, Commercial Economics, I found out that this did not meet my expectations.</p>
<p>At one point I ended up at ITvitae and started working on my C# programming skills. This went well for me because Java is similar in syntax to C#. Here I have made several complicated programs with C# and related languages such as SQL, HTML XAML, JavaScript and CSS. At ITvitae I have greatly improved my software development skills. After about a year I have successfully completed the process.</p>
<p>My interests lie in the latest techniques in software development and electronics. In particular what advantages and disadvantages there are. For example, I can get enthusiastic about developments such as Blazor. This offers such cool options within the internet landscape. For example, the website can be installed as a local application and C# can be used instead of JavaScript! If I find something interesting, I want to find out and test it. See what has gotten better or worse.</p>
<p>Besides my passion for programming, I am also interested in hardware. For example, I have built my own PC and home server. That very server you are accessing right now.</p>
<p>That’s it. If you want to know more about me or Maurice Software Solutions, please navigate to the feedback or contact page to ask your question</p>",
                            PageSectionFK = new Guid("7d8aa5ed-bb0a-4ca8-a9bf-46085cec9369"),
                            Type = "Body2"
                        },
                        new
                        {
                            SectionPartId = new Guid("be6340aa-b3b2-40e7-b714-e326b3a2d1a1"),
                            Content = "<h4>Maurice Slegtenhorst</h4>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Title1"
                        },
                        new
                        {
                            SectionPartId = new Guid("5a62269a-200e-4369-9bf1-3bbb6f583533"),
                            Content = "<h5>C# Software Developer</h5>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "SubTitle1"
                        },
                        new
                        {
                            SectionPartId = new Guid("015bc7a4-ca99-4a35-992a-4684cda74947"),
                            Content = "<strong>Contact information</strong>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Header1"
                        },
                        new
                        {
                            SectionPartId = new Guid("a176b1c9-128c-4eda-aecc-4ba06e2676bb"),
                            Content = "<div class=\"row\"><div class=\"col - 6\">Phone number:</div><div class=\"col - 6\">+31 645377536</div></div><div class=\"row\"><div class=\"col - 6\">Personal e-mail:</div><div class=\"col - 6\">maurice.slegtenhorst@outlook.com</div></div><div class=\"row\"><div class=\"col - 6\">Student e-mail</div><div class=\"col - 6\">maurice.slegtenhorst@itvitaelearning.nl</div></div></p>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Body1"
                        },
                        new
                        {
                            SectionPartId = new Guid("0a7ddc1b-f0af-42c6-b4fe-af2cef21991e"),
                            Content = "<strong>What can he do?</strong>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Header2"
                        },
                        new
                        {
                            SectionPartId = new Guid("5ec5b944-f7fb-4dd9-8424-606316770306"),
                            Content = "<p>C#, JavaScript, SQL, HTML5, CSS3, XAML and XML</p>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Body2"
                        },
                        new
                        {
                            SectionPartId = new Guid("f5c26e53-abb4-4b0c-b4d1-376809c9a3bd"),
                            Content = "<strong>Maurice in a nutshell</strong>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Header3"
                        },
                        new
                        {
                            SectionPartId = new Guid("38d7d41d-0326-4cb1-ae2c-a4d9aafa12bd"),
                            Content = "<p>Born on 27th of april 1991 and living in The Netherlands sinds then. Loves coding and fiddling with electronics. Likes to go for a jog or socialize</p>",
                            PageSectionFK = new Guid("814c1475-113c-4c3c-bd9a-a4fbf36939b4"),
                            Type = "Body3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.EditPageContent.DALSectionPart", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.EditPageContent.DALPageSection", "DALPageSection")
                        .WithMany("DALSectionParts")
                        .HasForeignKey("PageSectionFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
