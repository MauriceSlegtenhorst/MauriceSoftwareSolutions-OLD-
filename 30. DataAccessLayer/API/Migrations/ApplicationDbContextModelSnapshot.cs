// <auto-generated />
using System;
using MTS.DAL.DatabaseAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MTS.BL.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MTS.DAL.Entities.Core.Credit.DALCredit", b =>
                {
                    b.Property<Guid>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditCategoryFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GotFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GotFromWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MadeBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MadeByWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreditId");

                    b.HasIndex("CreditCategoryFK");

                    b.ToTable("Credits");

                    b.HasData(
                        new
                        {
                            CreditId = new Guid("f386ce3e-8087-4cb8-bf2a-b541f0edd169"),
                            CreditCategoryFK = new Guid("02e668f8-f7ca-4f8a-b033-09f61878f803"),
                            Description = "<p>Most, if not all icons came from this provider. This font came with the project when it was created. I kept it for its ease of use.</p>",
                            GotFrom = "Blazor WebAssembly project builder",
                            GotFromWebsite = "https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor",
                            LinkToImage = "https://img.stackshare.io/service/3029/iconic.png",
                            MadeByWebsite = "https://useiconic.com/open",
                            SubTitle = "<h5>Provider of fonts and icons</h5>",
                            Title = "<h4>Open Iconic</h4>"
                        },
                        new
                        {
                            CreditId = new Guid("78d0bc31-c3d1-4e6e-b8e0-3c9d9ce2c340"),
                            CreditCategoryFK = new Guid("02e668f8-f7ca-4f8a-b033-09f61878f803"),
                            Description = "<p>Some tasks while creating an UI are repetative. Syncfusion helps by providing components that cover these needs.</p>",
                            GotFrom = "Syncfusion community license",
                            GotFromWebsite = "https://www.syncfusion.com/products/communitylicense",
                            LinkToImage = "https://cdn.syncfusion.com/content/images/Logo/Logo_150dpi.png",
                            MadeByWebsite = "https://www.syncfusion.com/blazor-components",
                            SubTitle = "<h5>Easy to use premade Blazor components</h5>",
                            Title = "<h4>Syncfusion</h4>"
                        });
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.Credit.DALCreditCategory", b =>
                {
                    b.Property<Guid>("CreditCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreditCategoryId");

                    b.ToTable("CreditCategories");

                    b.HasData(
                        new
                        {
                            CreditCategoryId = new Guid("02e668f8-f7ca-4f8a-b033-09f61878f803"),
                            SubTitle = "<h5>Sources that made UI development easier</h5>",
                            Title = "<h4>Don't reinvent the wheel<h4>"
                        });
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.DALUserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Affix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3ac0d468-eaf7-45dc-a817-ae5224276540",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea34b86d-7e85-45fe-b7bb-0436154a2135",
                            Email = "mauricesoftwaresolution@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Maurice",
                            IsAdmitted = true,
                            LastName = "Slegtenhorst",
                            LockoutEnabled = true,
                            NormalizedEmail = "MAURICESOFTWARESOLUTION@OUTLOOK.COM",
                            NormalizedUserName = "MAURICESOFTWARESOLUTION@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcVZGJyAFQ/+su7fIl8qk+S2g21JC2T/5LMyjWbUfkg2/r4uu/De/6y8xQh6bSbzg==",
                            PhoneNumber = "0645377536",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "46db7ffc-2111-4100-b2e4-77efa6d12d2d",
                            TwoFactorEnabled = false,
                            UserName = "mauricesoftwaresolution@outlook.com"
                        },
                        new
                        {
                            Id = "7695a43b-9e4f-43a4-a6b7-bdf5fd1b9ebb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17d340a9-6d71-46f3-894f-8b73b85912b2",
                            Email = "hanneke.slegtenhorst1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hanneke",
                            IsAdmitted = true,
                            LastName = "Slegtenhorst",
                            LockoutEnabled = true,
                            NormalizedEmail = "HANNEKE.SLEGTENHORST1@GMAIL.COM",
                            NormalizedUserName = "HANNEKE.SLEGTENHORST1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcVZGJyAFQ/+su7fIl8qk+S2g21JC2T/5LMyjWbUfkg2/r4uu/De/6y8xQh6bSbzg==",
                            PhoneNumber = "060076761477",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f084ac69-a2f8-4889-a56c-d99c4202415f",
                            TwoFactorEnabled = false,
                            UserName = "hanneke.slegtenhorst1@gmail.com"
                        },
                        new
                        {
                            Id = "3cd4f0f2-67f6-43cf-8dbd-e47bf7ca5964",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0a5b443-dbc4-4c1d-94f3-70a752d4be76",
                            Email = "privilegedemployee01@mss.nl",
                            EmailConfirmed = true,
                            FirstName = "PrivilegedEmployee_01",
                            IsAdmitted = true,
                            LastName = "None",
                            LockoutEnabled = true,
                            NormalizedEmail = "PRIVILEGEDEMPLOYEE01@MSS.NL",
                            NormalizedUserName = "PRIVILEGEDEMPLOYEE01@MSS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcVZGJyAFQ/+su7fIl8qk+S2g21JC2T/5LMyjWbUfkg2/r4uu/De/6y8xQh6bSbzg==",
                            PhoneNumber = "060090464683",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "246ff64b-e568-4164-9a8e-7f987b762e8f",
                            TwoFactorEnabled = false,
                            UserName = "privilegedemployee01@mss.nl"
                        },
                        new
                        {
                            Id = "a797f750-7595-4b14-8490-964282d9792f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7cb966d-eab3-45af-8ab4-31e3341de65a",
                            Email = "employee01@mss.nl",
                            EmailConfirmed = true,
                            FirstName = "Employee_01",
                            IsAdmitted = true,
                            LastName = "None",
                            LockoutEnabled = true,
                            NormalizedEmail = "EMPLOYEE01@MSS.NL",
                            NormalizedUserName = "EMPLOYEE01@MTS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcVZGJyAFQ/+su7fIl8qk+S2g21JC2T/5LMyjWbUfkg2/r4uu/De/6y8xQh6bSbzg==",
                            PhoneNumber = "060026821470",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d9c8ddc6-0e85-40e0-aa6e-c0bf3ba37f68",
                            TwoFactorEnabled = false,
                            UserName = "Employee01@MTS.nl"
                        },
                        new
                        {
                            Id = "c5a70434-3e5f-4dd9-86e4-e80c501c1935",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c92bd219-6716-454e-bbe0-f40758dba802",
                            Email = "standarduser01@mts.nl",
                            EmailConfirmed = true,
                            FirstName = "StandardUser_01",
                            IsAdmitted = true,
                            LastName = "None",
                            LockoutEnabled = true,
                            NormalizedEmail = "STANDARDUSER01@MSS.NL",
                            NormalizedUserName = "STANDARDUSER01@MSS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcVZGJyAFQ/+su7fIl8qk+S2g21JC2T/5LMyjWbUfkg2/r4uu/De/6y8xQh6bSbzg==",
                            PhoneNumber = "060019710307",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ec5bd8b8-b99d-411f-acda-dfe8a2400bd4",
                            TwoFactorEnabled = false,
                            UserName = "standarduser01@mts.nl"
                        });
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.EditPageContent.DALPageSection", b =>
                {
                    b.Property<Guid>("PageSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PageRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("int");

                    b.HasKey("PageSectionId");

                    b.ToTable("PageSections");

                    b.HasData(
                        new
                        {
                            PageSectionId = new Guid("c6e63cbd-588e-4283-a410-3a489c979525"),
                            PageRoute = "Index",
                            SectionNumber = 0
                        },
                        new
                        {
                            PageSectionId = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            PageRoute = "Index",
                            SectionNumber = 1
                        });
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.EditPageContent.DALSectionPart", b =>
                {
                    b.Property<Guid>("SectionPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PageSectionFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionPartId");

                    b.HasIndex("PageSectionFK");

                    b.ToTable("SectionParts");

                    b.HasData(
                        new
                        {
                            SectionPartId = new Guid("1964c609-c7b6-4b1f-ab06-653c1fa71a2b"),
                            Content = "<h4>About me and MSS</h4>",
                            PageSectionFK = new Guid("c6e63cbd-588e-4283-a410-3a489c979525"),
                            Type = "Title1"
                        },
                        new
                        {
                            SectionPartId = new Guid("0648cb01-e522-41fa-be4e-f3c7664e1ac4"),
                            Content = "<strong>What is MSS?</strong>",
                            PageSectionFK = new Guid("c6e63cbd-588e-4283-a410-3a489c979525"),
                            Type = "Header1"
                        },
                        new
                        {
                            SectionPartId = new Guid("852bf666-646e-4c1a-bd24-e80b78da167d"),
                            Content = "<p>Maurice Software Solutions was created to showcase my programming skills and to have some fun. Aside from that there is handy and fun functionality to be found like a fully-fledged, unlimited personal cloud storage system and a chatroom. And those are just the things I am currently working on. I am dedicated to improving Maurice Software Solutions as a whole regularly whilst adding cool new features.</p>",
                            PageSectionFK = new Guid("c6e63cbd-588e-4283-a410-3a489c979525"),
                            Type = "Body1"
                        },
                        new
                        {
                            SectionPartId = new Guid("dd640107-8672-4103-83dd-bf67259ee3c4"),
                            Content = "<strong>Who is Maurice?</strong>",
                            PageSectionFK = new Guid("c6e63cbd-588e-4283-a410-3a489c979525"),
                            Type = "Header2"
                        },
                        new
                        {
                            SectionPartId = new Guid("eb61a4f0-2817-444e-90f8-79d16b2f4529"),
                            Content = @"<p>I am an enthusiastic man with a strong passion for programming. Social and friendly going. Coding has been my hobby from an early age. When I was 13, I made my first program in Visual Basic. A slot machine where there were secret options to get infinite money for example. Later, around the age of 18, I started working with Java, XML and Android Studio. With this I built a number of Android apps including an applocker. This app allowed the user to choose which apps and services needed an additional password or fingerprint to be used.</p>
<p>Friends and especially family regularly ask me for help with electronics and software related matters. I think this is because I have been busy with software and hardware practically my whole life.</p>
<p>Marketing and commerce seemed to be my career choice for a long time. During my higher professional education, Commercial Economics, I found out that this did not meet my expectations.</p>
<p>At one point I ended up at ITvitae and started working on my C# programming skills. This went well for me because Java is similar in syntax to C#. Here I have made several complicated programs with C# and related languages such as SQL, HTML XAML, JavaScript and CSS. At ITvitae I have greatly improved my software development skills. After about a year I have successfully completed the process.</p>
<p>My interests lie in the latest techniques in software development and electronics. In particular what advantages and disadvantages there are. For example, I can get enthusiastic about developments such as Blazor. This offers such cool options within the internet landscape. For example, the website can be installed as a local application and C# can be used instead of JavaScript! If I find something interesting, I want to find out and test it. See what has gotten better or worse.</p>
<p>Besides my passion for programming, I am also interested in hardware. For example, I have built my own PC and home server. That very server you are accessing right now.</p>
<p>That’s it. If you want to know more about me or Maurice Software Solutions, please navigate to the feedback or contact page to ask your question</p>",
                            PageSectionFK = new Guid("c6e63cbd-588e-4283-a410-3a489c979525"),
                            Type = "Body2"
                        },
                        new
                        {
                            SectionPartId = new Guid("d672d408-624b-425b-84c0-c09779aaad42"),
                            Content = "<h4>Maurice Slegtenhorst</h4>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Title1"
                        },
                        new
                        {
                            SectionPartId = new Guid("71067f26-7cf1-4aba-a9d5-c101b0725633"),
                            Content = "<h5>C# Software Developer</h5>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "SubTitle1"
                        },
                        new
                        {
                            SectionPartId = new Guid("110248e6-4a87-4a86-88a9-6b38e7577414"),
                            Content = "<strong>Contact information</strong>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Header1"
                        },
                        new
                        {
                            SectionPartId = new Guid("6c8e8c7f-4955-4d02-a8d7-d8f4900277a4"),
                            Content = "<div class=\"row\"><div class=\"col - 6\">Phone number:</div><div class=\"col - 6\">+31 645377536</div></div><div class=\"row\"><div class=\"col - 6\">Personal e-mail:</div><div class=\"col - 6\">maurice.slegtenhorst@outlook.com</div></div><div class=\"row\"><div class=\"col - 6\">Student e-mail</div><div class=\"col - 6\">maurice.slegtenhorst@itvitaelearning.nl</div></div></p>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Body1"
                        },
                        new
                        {
                            SectionPartId = new Guid("179f4afb-7f98-416e-aea8-4d7eeb65e0d5"),
                            Content = "<strong>What can he do?</strong>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Header2"
                        },
                        new
                        {
                            SectionPartId = new Guid("1a9ece75-da90-41db-8d6b-0f041e962b23"),
                            Content = "<p>C#, JavaScript, SQL, HTML5, CSS3, XAML and XML</p>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Body2"
                        },
                        new
                        {
                            SectionPartId = new Guid("f8c48f69-4c87-4d50-8475-fca56da175da"),
                            Content = "<strong>Maurice in a nutshell</strong>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Header3"
                        },
                        new
                        {
                            SectionPartId = new Guid("c2caf1ac-6e69-4a25-b1ce-dc6e5d1f98f4"),
                            Content = "<p>Born on 27th of april 1991 and living in The Netherlands sinds then. Loves coding and fiddling with electronics. Likes to go for a jog or socialize</p>",
                            PageSectionFK = new Guid("b8505101-d148-4869-ba87-0023a8cf634e"),
                            Type = "Body3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ead5b150-ca04-4bce-a55d-83cf739dc7d8",
                            ConcurrencyStamp = "a009749f-22c8-41ce-8b71-7f3cf606ed9a",
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "4c70af36-f0fc-457c-aede-1b0ec2247518",
                            ConcurrencyStamp = "3c7a3847-2824-46dc-af28-8a59c42b3852",
                            Name = "privilegedemployee",
                            NormalizedName = "PRIVILEGEDEMPLOYEE"
                        },
                        new
                        {
                            Id = "99e1d4e1-94b2-4ad0-9b63-56779bab8277",
                            ConcurrencyStamp = "8126c200-fb00-4a7a-ad68-39aac054b476",
                            Name = "employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "2aa69a56-324d-4b2e-858f-e12421a9657f",
                            ConcurrencyStamp = "dd841d33-b52f-4baf-a774-0afbe389cdd5",
                            Name = "volenteer",
                            NormalizedName = "VOLENTEER"
                        },
                        new
                        {
                            Id = "126bccb1-67de-4865-8359-25f1eaf2c408",
                            ConcurrencyStamp = "d6287b54-a7f5-4d1d-95d8-2d97fb37bc16",
                            Name = "privilegeduser",
                            NormalizedName = "PRIVILEGEDUSER"
                        },
                        new
                        {
                            Id = "fdf58f7d-b2ba-443a-84c1-f4ece9b839b5",
                            ConcurrencyStamp = "1fec1417-b9a2-4347-8c75-49c7eb9e78ca",
                            Name = "standarduser",
                            NormalizedName = "STANDARDUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3ac0d468-eaf7-45dc-a817-ae5224276540",
                            RoleId = "ead5b150-ca04-4bce-a55d-83cf739dc7d8"
                        },
                        new
                        {
                            UserId = "7695a43b-9e4f-43a4-a6b7-bdf5fd1b9ebb",
                            RoleId = "ead5b150-ca04-4bce-a55d-83cf739dc7d8"
                        },
                        new
                        {
                            UserId = "3cd4f0f2-67f6-43cf-8dbd-e47bf7ca5964",
                            RoleId = "4c70af36-f0fc-457c-aede-1b0ec2247518"
                        },
                        new
                        {
                            UserId = "a797f750-7595-4b14-8490-964282d9792f",
                            RoleId = "99e1d4e1-94b2-4ad0-9b63-56779bab8277"
                        },
                        new
                        {
                            UserId = "c5a70434-3e5f-4dd9-86e4-e80c501c1935",
                            RoleId = "fdf58f7d-b2ba-443a-84c1-f4ece9b839b5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.Credit.DALCredit", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.Credit.DALCreditCategory", null)
                        .WithMany("DALCredits")
                        .HasForeignKey("CreditCategoryFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTS.DAL.Entities.Core.EditPageContent.DALSectionPart", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.EditPageContent.DALPageSection", "DALPageSection")
                        .WithMany("DALSectionParts")
                        .HasForeignKey("PageSectionFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MTS.DAL.Entities.Core.DALUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
