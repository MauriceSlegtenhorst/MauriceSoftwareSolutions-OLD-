@inject ISpinnerService _spinnerService
@inherits ADisposibleBaseComponent

<SfSpinner @ref="Spinner" Target="@_spinnerTarget" CssClass="e-spin-overlay" Type="SpinnerType.Fabric" ZIndex="3"/>

@code {
    private SfSpinner Spinner { get; set; }
    private string _spinnerTarget = "#spinner-container";
    private bool isShowing;

    protected override void OnInitialized()
    {
        _spinnerService.OnShow += ShowSpinnerAsync;
        _spinnerService.OnHide += HideSpinnerAsync;
        _spinnerService.OnSetSpinnerLabel += SetSpinnerLabel;

        base.OnInitialized();
    }

    private async Task ShowSpinnerAsync(string message = null)
    {
        if (String.IsNullOrEmpty(message) == false)
            await SetSpinnerLabel(message);

        await Spinner.Show();

        isShowing = true;
    }

    private async Task HideSpinnerAsync()
    {
        await Spinner.Hide();

        isShowing = false;
    }

    private async Task SetSpinnerLabel(string message)
    {
        var dictionary = new Dictionary<string, object>();

        dictionary.Add(nameof(Spinner.Label), message);

        var parameters = ParameterView.FromDictionary(dictionary);

        await Spinner.SetParametersAsync(parameters);
    }

    public override void Dispose()
    {
        _spinnerService.OnShow -= ShowSpinnerAsync;
        _spinnerService.OnHide -= HideSpinnerAsync;
        _spinnerService.OnSetSpinnerLabel -= SetSpinnerLabel;
    }
}
