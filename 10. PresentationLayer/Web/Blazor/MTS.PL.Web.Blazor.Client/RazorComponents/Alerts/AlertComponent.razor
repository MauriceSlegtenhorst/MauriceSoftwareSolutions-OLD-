<div class="@_topCSSClass" role="alert">
    @if (!String.IsNullOrEmpty(Title)) 
    {
        <div class="row">
            <span class="@_iconCSSClass" aria-hidden="true"/>
            <h4>@Title</h4>
        </div>    
    }
    
    @if (!String.IsNullOrEmpty(Subtitle))
    {
        <div class="row ">
            <h5>@Subtitle</h5>
        </div>
    }

    @if (ContentMessages != null)
    {
        if (ShowContentAsList == true)
        {
            <div class="list-group padding-horizontal-left">
                @{ 
                    if(ContentIsHtml == true)
                    {
                        foreach (var message in ContentMessages)
                        {
                            <span>- @((MarkupString)message)</span>
                        }
                    }
                    else
                    {
                        foreach (var message in ContentMessages)
                        {
                            <span>- @message</span>
                        }
                    }
                }
            </div>
        }
        else
        {
            <div class="list-group padding-horizontal-left">
                @{ 
                    if(ContentIsHtml == true)
                    {
                        foreach (var message in ContentMessages)
                        {
                            <span>@((MarkupString)message)</span>
                        }
                    }
                    else
                    {
                        foreach (var message in ContentMessages)
                        {
                            <span>@message</span>
                        }
                    }
                }
            </div>
        }
    }


</div>

@code {
    [Parameter]
    public AlertTypeEnum AlertType { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Subtitle { get; set; }

    [Parameter]
    public IEnumerable<string> ContentMessages { get; set; }

    [Parameter]
    public bool ShowContentAsList { get; set; }

    [Parameter]
    public bool ContentIsHtml { get; set; }

    private string _topCSSClass;
    private string _iconCSSClass;

    public enum AlertTypeEnum
    {
        Info,
        Success,
        Warning,
        Danger
    }

    protected override Task OnInitializedAsync()
    {
        switch (AlertType)
        {
            default:
                _topCSSClass = "alert alert-info";
                _iconCSSClass = "alert-icon oi oi-info";
                break;
            case AlertTypeEnum.Success:
                _topCSSClass = "alert alert-success";
                _iconCSSClass = "alert-icon oi oi-check";
                break;
            case AlertTypeEnum.Warning:
                _topCSSClass = "alert alert-warning";
                _iconCSSClass = "alert-icon oi oi-warning";
                break;
            case AlertTypeEnum.Danger:
                _topCSSClass = "alert alert-danger";
                _iconCSSClass = "alert-icon oi oi-warning";
                break;
        }

        return base.OnInitializedAsync();
    }
}
