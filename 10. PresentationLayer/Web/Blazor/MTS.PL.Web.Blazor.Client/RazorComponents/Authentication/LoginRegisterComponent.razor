@inject IHttpClientFactory _httpClientFactory
@inject ILoginService  _loginService
@inject IToastService _toastService
@inject ISpinnerService _spinnerService
@inject NavigationManager _navigationManager
@using System.Net.Mail

        <SfCard>
            <CardHeader>
                <h3>Please enter your details</h3>
            </CardHeader>
            <CardContent>
                <EditForm EditContext="@_formContext" OnValidSubmit="SubmitForm">
                    <div class="content-wrapper">

                        <DataAnnotationsValidator />

                        <div class="form-group row">
                            <SfTextBox Type="InputType.Email" Placeholder="Enter Email" CssClass="@_emailCssClass" FloatLabelType="@FloatLabelType.Auto"
                                       ShowClearButton="true" OnBlur="@CheckForm" @bind-Value="@_inputModel.Email" />

                            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else. Ever.</small>
                        </div>

                        <div class="form-group row">
                            <SfTextBox Type="InputType.Password" Placeholder="Enter Password" CssClass="@_passwordCssClass" FloatLabelType="@FloatLabelType.Auto"
                                       ShowClearButton="true" OnBlur="@CheckForm" @bind-Value="@_inputModel.Password" />

                            <ValidationMessage For="@(() => _inputModel.Password)" />
                        </div>

                        @if (IsLogin == false)
                        {
                            <div class="form-group row">
                                <AlertComponent AlertType="AlertComponent.AlertTypeEnum.Info" Title="Password must atleast" ContentMessages="Constants.VALID_PASSWORD_REQUIREMENTS" ShowContentAsList="true" />
                            </div>
                        }
                        else
                        {
                            <div class="form-group form-check row">
                                <SfCheckBox Label="Remember me?" @bind-Checked="@_inputModel.RememberMe" />
                            </div>
                        }

                        <div class="form-group row">
                            <SfButton Type="submit" CssClass="btn btn-primary" Content="@_btnContent" />
                        </div>

                    </div>
                </EditForm>
            </CardContent>
        </SfCard>

<style>
    .content-wrapper {
        width: 90%;
        margin: 0 auto;
        min-width: 85px;
    }

        .content-wrapper div.row {
            padding: 15px 0px;
            align-content: center;
        }

    .custom-padding-05 {
        padding-top: 5px;
    }

    @@media only screen and (max-width: 480px) {
        .content-wrapper {
            width: 92vw;
        }

        #card {
            max-width: 100%;
            width: 100%;
        }

        .col-xs-6,
        .col-xs-4,
        .col-xs-12 {
            padding: 10px 5px;
            width: 100%;
        }

        .content-wrapper div.row {
            padding: 0px;
        }
    }

    #description td {
        vertical-align: top;
    }

    .e-outline.e-float-input,
    .e-outline.e-float-input.e-control-wrapper {
        margin-top: 0;
    }

    .fabric .row.material2,
    .bootstrap .row.material2,
    .bootstrap4 .row.material2,
    .highcontrast .row.material2 {
        display: none;
    }
</style>

@code
{
    [CascadingParameter(Name = nameof(MainLayout))]
    public MainLayout MainLayoutInstance { get; set; }

    private EditContext _formContext;

    private string _emailCssClass;

    private Regex _passwordRegex;
    private string _passwordCssClass;

    private string _btnContent;

    private bool _isEmailValid;
    private bool _isPasswordValid;

    [Parameter]
    public bool IsLogin { get; set; }


    public InputModel _inputModel;

    public class InputModel
    {
        private string email;
        [Required]
        [EmailAddress]
        public string Email { get => email ?? (email = String.Empty); set => email = value; }

        private string password;
        [Required]
        [DataType(DataType.Password)]
        [RegularExpression(
            pattern: Constants.VALID_PASSWORD_PATTERN,
            ErrorMessage = Constants.PASSWORD_ERROR_MESSAGE)]
        public string Password { get => password ?? (password = String.Empty); set => password = value; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }


    protected override Task OnInitializedAsync()
    {
        _btnContent = IsLogin ? "Log in" : "Register";

        _passwordRegex = new Regex(Constants.VALID_PASSWORD_PATTERN);

        _inputModel = new InputModel();

        _formContext = new EditContext(_inputModel);

        return base.OnInitializedAsync();
    }

    private async Task SubmitForm()
    {
        if (_isEmailValid == false || _isPasswordValid == false)
            return;

        string requestUrl;

        if (IsLogin)
            requestUrl = $"{Constants.APIControllers.IDENTITY}/{Constants.IdentityControllerEndpoints.LOG_IN}";
        else
            requestUrl = $"{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.CREATE_BY_CREDENTIALS}";

        HttpResponseMessage result;

        _spinnerService.ShowSpinner();

        try
        {
            result = await _httpClientFactory.CreateClient(BlazorConstants.HttpClients.API).PutAsJsonAsync(requestUrl, _inputModel);
        }
        catch (Exception ex)
        {
            _toastService.ShowExceptionToast(ex);
            return;
        }
        finally
        {
            _spinnerService.HideSpinner();
        }

        var resultContentAsString = await result?.Content.ReadAsStringAsync();

        if (result.IsSuccessStatusCode)
        {
            if (IsLogin)
            {
                await _loginService.Login(resultContentAsString);

                _toastService.ShowToast(new ToastModel
                {
                    CssClass = "e-toast-success",
                    Icon = "e-success toast-icons",
                    Title = "Login was succesfull",
                    Content = $"Account for {_inputModel.Email} is now logged in.",
                    ShowProgressBar = true
                });

                _navigationManager.NavigateTo("/");
            }
            else
            {
                _navigationManager.NavigateTo("/account/accountsubmitted");
            }
        }
        else
        {
            IEnumerable<string> resultErrors = JsonConvert.DeserializeObject<IEnumerable<string>>(resultContentAsString);

            var stringBuilder = new StringBuilder();

            foreach (var item in resultErrors)
            {
                stringBuilder.AppendLine($"- {item}");
            }
            Exception ex = new Exception(stringBuilder.ToString());
            _toastService.ShowExceptionToast(ex);
        }
    }

    private void CheckForm()
    {
        if (_formContext.Validate() == false)
        {
            if (ValidateEmail(_inputModel.Email) == false)
            {
                _isEmailValid = false;
                _emailCssClass = "e-error";
            }
            else
            {
                _isEmailValid = true;
                _emailCssClass = "e-success";
            }

            if (ValidatePassword(_inputModel.Password) == false)
            {
                _isPasswordValid = false;
                _passwordCssClass = "e-error";
            }
            else
            {
                _isPasswordValid = true;
                _passwordCssClass = "e-success";
            }
        }
        else
        {
            _isEmailValid = true;
            _isPasswordValid = true;
            _emailCssClass = "e-success";
            _passwordCssClass = "e-success";
        }

        StateHasChanged();
    }

    private bool ValidateEmail(string email)
    {
        if (String.IsNullOrEmpty(email))
            return false;

        if (email.Length < 6)
            return false;

        string domainAndTopLvlDomain;
        string domain;

        try
        {
            domainAndTopLvlDomain = email.Split('@')[1];

            domain = domainAndTopLvlDomain.Split('.')[0];
        }
        catch
        {
            return false;
        }

        if (Constants.VALID_EMAIL_DOMAINS.Contains(domain) == false)
            return false;

        try
        {
            var _email = new MailAddress(email.Normalize());
        }
        catch (FormatException)
        {
            return false;
        }

        return true;
    }

    private bool ValidatePassword(string password)
    {
        return _passwordRegex.IsMatch(password);
    }
}
