@inject IDialogService _dialogService
@inject IToastService _toastService

<div class="custom-card custom-card-animated">
    <div class="e-card-content">
        <AuthorizeView Roles="@($"{Constants.Security.ADMINISTRATOR},{Constants.Security.PRIVILEGED_EMPLOYEE},{Constants.Security.EMPLOYEE}")">
            <Authorized>
                    <div class="row justify-content-end" style="padding-right:16px; padding-bottom:16px;">
                            <SfButton CssClass="e-btn e-outline e-primary" @onclick="ToggleIsInEditMode"><span class="@(isInEditMode ? "oi oi-check" : "oi oi-pencil")" /></SfButton>
                            <SfButton CssClass="e-btn e-outline e-primary" @onclick="CreditTitleHasChanged"><span class="@(isInEditMode ? "oi oi-x" : "oi oi-trash")" /></SfButton>
                    </div>
            </Authorized>
        </AuthorizeView>
        <div class="row">
            <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
                <img src="@(Credit.LinkToImage)" class="w-75" />
            </div>

            <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
                @((MarkupString)Credit.Title)
                @((MarkupString)Credit.SubTitle)
                <p>@((MarkupString)Credit.GotFrom)</p>
                <p>@((MarkupString)Credit.MadeBy)</p>
                <p>@((MarkupString)Credit.Description)</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PLCredit Credit { get; set; }

    private bool isInEditMode;

    private const string splitterPaneCss = "theme";

    private void ToggleIsInEditMode()
    {
        isInEditMode = !isInEditMode;

        if (isInEditMode == true)
        {
            var parameters = new DialogParameters();
            parameters.Add("FormId", 3);
            parameters.Add("Credit", Credit);

            _dialogService.OnClose += DialogClosed;
            _dialogService.Show<EditCreditComponent>("Login jaja test", parameters, new DialogOptions { HasHeader = true, HasButtons = true, HasCloseButton = true, HasBackgroundCancel = false });
        }
    }

    private void DialogClosed(DialogResult dialogResult)
    {
        if(dialogResult.Cancelled == true)
        {
            _toastService.ShowSuccessToast("Cancelled!");
        }
        else
        {
            _toastService.ShowSuccessToast(dialogResult.Data.ToString());
        }

        _dialogService.OnClose -= DialogClosed;
    }

    private void CreditTitleHasChanged()
    {

    }
}
