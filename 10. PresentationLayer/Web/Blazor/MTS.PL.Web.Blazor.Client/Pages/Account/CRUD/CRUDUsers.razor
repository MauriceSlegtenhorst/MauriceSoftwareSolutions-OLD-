@page "/account/crud/crudusers"
@attribute [Authorize(
Roles =
Constants.Security.ADMINISTRATOR + "," +
Constants.Security.PRIVILEGED_EMPLOYEE)]
@inject HttpClient _httpClient
@using GridActions = Syncfusion.Blazor.Grids.Action

<h1>CRUD accounts</h1>
<h4>Create, read, update and delete accounts</h4>

<AlertComponent AlertType="@AlertComponent.AlertTypeEnum.Warning" Title="@BlazorConstants.UNDER_CONSTRUCTION_TITLE" ContentMessages="@messages" />

@if (_isInitialized == true)
{
    <div class="fill-maxed">
        <SfGrid ID="Grid"
                @ref="_crudGrid"
                TValue="PLUserAccount"
                Toolbar="@_toolBarItems"
                EnablePersistence="true"
                AllowPaging="true"
                AllowSorting="true"
                ShowColumnChooser="true">

            <GridEditSettings AllowAdding="true"
                              AllowEditing="true"
                              AllowDeleting="true"
                              Mode="EditMode.Dialog"
                              Dialog="_dialogSettings"/>

            <GridEvents TValue="PLUserAccount"
                        OnActionFailure="ActionFailure"
                        OnLoad="ShowSpinner"
                        DataBound="HideSpinner"
                        OnActionBegin="OnActionBegin"
                        OnActionComplete="HideSpinner"/>

            <SfDataManager AdaptorInstance="@typeof(APIAccountsAdapter)" Adaptor="Adaptors.CustomAdaptor" />

            <GridColumns>
                @{
                    List<Exception> exceptions = null;
                    try
                    {
                        if (_propertyInfos.Any() == true)
                        {
                            foreach (PropertyInfo properyInfo in _propertyInfos)
                            {
                                try
                                {
                                    string field = properyInfo.Name;
                                    string header = PropertyNameConverter.ConvertFromProperty(properyInfo.Name);
                                    bool isPrimKey = properyInfo.Name == nameof(PLUserAccount.Id);
                                    bool canWrite = properyInfo.CanWrite;
                                    EditType editType = EditType.DefaultEdit;
                                    editTypeDictionairy.TryGetValue(properyInfo.PropertyType, out editType);
                                    bool isCheckBox = editType == EditType.BooleanEdit;
                                    TextAlign textAlignment = isCheckBox ? TextAlign.Center : TextAlign.Left;
                                    string width;

                                    if (editType == EditType.NumericEdit || editType == EditType.BooleanEdit)
                                        width = "30";
                                    else
                                        width = null;

                                    Debug.WriteLine($"Field: {field} | EditType: {Enum.GetName(typeof(EditType), editType)}");

                                    // Workaround so we don't remove validation of the other fields
                                    if (field == "Password")
                                    {
                                        ValidationRules _validationRules = new ValidationRules();
                                        <GridColumn Field="@field"
                                                    HeaderText="@header"
                                                    IsPrimaryKey="@isPrimKey"
                                                    IsIdentity="@isPrimKey"
                                                    EditType="@editType"
                                                    AllowEditing="@canWrite"
                                                    DisplayAsCheckBox="@isCheckBox"
                                                    TextAlign="@textAlignment"
                                                    MaxWidth="@width"
                                                    Width="@width" 
                                                    ValidationRules="_validationRules"/>
                                    }
                                    else
                                    {
                                        <GridColumn Field="@field"
                                                    HeaderText="@header"
                                                    IsPrimaryKey="@isPrimKey"
                                                    IsIdentity="@isPrimKey"
                                                    EditType="@editType"
                                                    AllowEditing="@canWrite"
                                                    DisplayAsCheckBox="@isCheckBox"
                                                    TextAlign="@textAlignment"
                                                    MaxWidth="@width"
                                                    Width="@width" />
                                    }

                                }
                                catch (Exception ex)
                                {
                                    if (exceptions == null)
                                        exceptions = new List<Exception>();

                                    exceptions.Add(ex);
                                }
                            }
                        }
                        else
                        {
                            if (exceptions == null)
                                exceptions = new List<Exception>();

                            exceptions.Add(new ArgumentException("No properties were found in useraccount"));
                        }

                        if (exceptions != null)
                        {
                            if (exceptions.Count > 1)
                                throw new AggregateException(exceptions);
                            else
                                throw exceptions[0];
                        }

                    }
                    catch (Exception ex)
                    {
                        MainLayoutInstance.ShowExceptionToast(ex);
                    }
                }
            </GridColumns>
        </SfGrid>
    </div>
}

@code{
    [CascadingParameter(Name = nameof(MainLayout))]
    public MainLayout MainLayoutInstance { get; set; }

    private IEnumerable<string> messages;

    private SfGrid<PLUserAccount> _crudGrid;

    private DialogSettings _dialogSettings = new DialogSettings { MinHeight="500px", Width="500px" };

    private List<string> _toolBarItems { get; set; } = new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "ColumnChooser" };

    PropertyInfo[] _propertyInfos;

    private Dictionary<Type, EditType> editTypeDictionairy = new Dictionary<Type, EditType>
    {
        { typeof(String), EditType.DefaultEdit },
        { typeof(Boolean), EditType.BooleanEdit },
        { typeof(Int32), EditType.NumericEdit },
        { typeof(Enum), EditType.DropDownEdit },
        { typeof(DateTime?), EditType.DateTimePickerEdit }
    };

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (_isInitialized == true)
            return;

        MainLayoutInstance.ShowSpinner();

        messages = new[] { BlazorConstants.UNDER_CONSTRUCTION_MESSAGE_AVAILIBLE, "Shows error but works." };

        _propertyInfos = typeof(PLUserAccount).GetProperties(
        BindingFlags.Public | BindingFlags.Instance)
        .Where(p => p.CanWrite == true &&
        p.PropertyType != typeof(DateTimeOffset?))
        .ToArray();

        HttpResponseMessage result = null;

        try
        {
            result = await _httpClient.GetAsync($"{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.GET_ALL}");
        }
        catch (Exception ex)
        {
            MainLayoutInstance.ShowExceptionToast(new Exception("Something went wrong while calling the server.", ex));
            return;
        }

        if (result.IsSuccessStatusCode == false)
        {
            MainLayoutInstance.ShowExceptionToast(new Exception($"Call was unsuccessfull:\n{result.StatusCode}\n{result.ReasonPhrase}"));
            return;
        }

        try
        {
            APIAccountsAdapter.httpClient = _httpClient;
            var accounts = JsonConvert.DeserializeObject<List<PLUserAccount>>(await result.Content.ReadAsStringAsync());

            APIAccountsAdapter.PLUserAccounts = accounts;
        }
        catch (Exception ex)
        {
            MainLayoutInstance.ShowExceptionToast(new Exception("Something went wrong while deserializing the server response.", ex));
        }

        await base.OnInitializedAsync();

        _isInitialized = true;
    }

    public void ActionFailure(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {

        MainLayoutInstance.ShowExceptionToast(new Exception($"An action failure occurred: {args.Error.ToString()}"));
    }

    public void ShowSpinner()
    {
        MainLayoutInstance.ShowSpinner();
    }

    public void HideSpinner()
    {
        MainLayoutInstance.HideSpinner();
    }

    public void OnActionBegin(ActionEventArgs<PLUserAccount> args)
    {
        if (args.RequestType.HasFlag(GridActions.Filtering | GridActions.Sorting))
        {
            MainLayoutInstance.ShowSpinner();
        }
    }
}
