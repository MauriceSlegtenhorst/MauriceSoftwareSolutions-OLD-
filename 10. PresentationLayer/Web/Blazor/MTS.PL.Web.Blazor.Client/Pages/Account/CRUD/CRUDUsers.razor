@page "/account/crudusers"
@attribute [Authorize(Roles = Constants.Security.ADMINISTRATOR)]
@inject HttpClient _httpClient

<h1>CRUD users</h1>

@if (ErrorDetails != null && ErrorDetails.Count > 0)
{
    <AlertComponent AlertType="@AlertComponent.AlertTypeEnum.Danger" Title="@ErrorTitle" ContentMessages="@ErrorDetails" ShowContentAsList="@ShowContentAsList" />
}

<SfGrid TValue="IPLUserAccount" AllowPaging="true" Toolbar="@ToolBarItems" ID="Grid" AllowSorting="true" Width="100%">

    <GridEditSettings AllowAdding="true"
                      AllowEditing="true"
                      AllowDeleting="true"
                      Mode="EditMode.Normal" />

    <GridEvents TValue="IPLUserAccount"
                OnActionFailure="@ActionFailure" />

    @{
        if (IsInitialRender)
        {
            <SfDataManager AdaptorInstance="@typeof(APIAccountsAdapter)" Adaptor="Adaptors.CustomAdaptor"/>
        }
    }

    <GridColumns>
            @{
                List<Exception> exceptions = null;
                try
                {
                    PropertyInfo[] propertyInfos = typeof(IPLUserAccount).GetProperties(BindingFlags.Public | BindingFlags.Instance);
                    if (propertyInfos.Any())
                    {

                        foreach (PropertyInfo properyInfo in propertyInfos)
                        {
                            try
                            {
                                string field = properyInfo.Name;
                                string header = PropertyNameConverter.ConvertFromProperty(properyInfo.Name);
                                bool isPrimKey = properyInfo.Name == "Id";
                                bool canWrite = properyInfo.CanWrite;
                                EditType editType = EditType.DefaultEdit;
                                editTypeDictionairy.TryGetValue(properyInfo.PropertyType, out editType);

                                <GridColumn Field="@field"
                                            HeaderText="@header"
                                            IsPrimaryKey="@isPrimKey"
                                            IsIdentity="@isPrimKey"
                                            EditType="@editType"
                                            AllowEditing="@canWrite"
                                            AutoFit="true"/>
                            }
                            catch (Exception ex)
                            {
                                if (exceptions == null)
                                    exceptions = new List<Exception>();

                                exceptions.Add(ex);
                            }
                        }
                    }
                    else
                    {
                        exceptions.Add(new ArgumentException("fromObject empty"));
                    }

                    if (exceptions != null)
                    {
                        if (exceptions.Count > 1)
                            throw new AggregateException(exceptions);
                        else
                            throw exceptions[0];
                    }

                }
                catch (AggregateException ex)
                {
                    // TODO Deal with exceptions
                    throw ex;
                }
            }
        </GridColumns>
</SfGrid>

@code{
    public static string ErrorTitle { get; set; }
    public static List<string> ErrorDetails { get; set; }
    public bool ShowContentAsList {
        get
        {
            if (ErrorDetails == null)
                return false;

            return ErrorDetails.Count > 1;
        }
    }

    public bool IsInitialRender = false;
    public List<string> ToolBarItems { get; set; } = new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" };

    private Dictionary<Type, EditType> editTypeDictionairy = new Dictionary<Type, EditType>
    {
        { typeof(string), EditType.DefaultEdit },
        { typeof(bool), EditType.BooleanEdit },
        { typeof(int), EditType.NumericEdit },
        { typeof(DateTimeOffset), EditType.DateTimePickerEdit },
    };

    protected async override void OnInitialized()
    {
        IsInitialRender = true;

        HttpResponseMessage result = null;

        try
        {
            result = await _httpClient.GetAsync($"{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.GET_ALL}");
        }
        catch (Exception ex)
        {
            HandleException(new Exception("Something went wrong while calling the server.", ex));
            return;
        }

        if (result.IsSuccessStatusCode == false)
        {
            HandleException(new Exception($"Call was unsuccessfull:\n{result.StatusCode}\n{result.ReasonPhrase}"));
            return;
        }

        try
        {
            APIAccountsAdapter.httpClient = _httpClient;
            APIAccountsAdapter.PLUserAccounts = JsonConvert.DeserializeObject<List<PLUserAccount>>(await result.Content.ReadAsStringAsync());
        }
        catch (Exception ex)
        {
            HandleException(new Exception("Something went wrong while deserializing the server response.", ex));
        }
    }

    public void ActionFailure(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {

        if (ErrorDetails == null)
            ErrorDetails = new List<string>();

        ErrorDetails.Add(args.Error.ToString());

        StateHasChanged();
    }

    public void HandleException(Exception ex)
    {
        if (ex == null || ex.Message == null)
            return;

#if DEBUG
        if(ErrorDetails == null)
            ErrorDetails = new List<string>();

        ErrorDetails.Add(ex.GetType().Name);
        ErrorDetails.Add(ex.Message);

        if (ex.InnerException != null)
        {
            ErrorDetails.Add(ex.InnerException.GetType().Name);
            ErrorDetails.Add(ex.InnerException.Message);
        }
#else
        ErrorDetails = new List<string> { "Something went wrong... Details are secret" };
#endif
        StateHasChanged();
    }
}
