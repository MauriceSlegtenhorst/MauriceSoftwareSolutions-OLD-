@page "/account/crud/crudusers"

@attribute [Authorize(
Roles =
Constants.Security.ADMINISTRATOR + "," +
Constants.Security.PRIVILEGED_EMPLOYEE)]

@inject IHttpClientFactory  _httpClientFactory
@inject IToastService _toastService
@inject ISpinnerService _spinnerService

@using GridActions = Syncfusion.Blazor.Grids.Action

<PageHeaderComponent PageName="All accounts" Subtitle="Create, read, update and delete accounts" />

<div class="page-body page-body-scroll-area">
    <div class="row padding-vertical-top page-body-normal-side-padding">

        @if (_isInitialized == true)
        {
            <div class="fill-maxed">
                <SfGrid ID="Grid"
                        @ref="_crudGrid"
                        TValue="PLUserAccount"
                        Toolbar="@_toolBarItems"
                        EnablePersistence="true"
                        AllowPaging="true"
                        AllowSorting="true"
                        ShowColumnChooser="true"
                        EnableHover="true">

                    <GridEditSettings AllowAdding="true"
                                      AllowEditing="true"
                                      AllowDeleting="true"
                                      Mode="EditMode.Dialog"
                                      Dialog="_dialogSettings" />

                    <GridEvents TValue="PLUserAccount"
                                OnActionFailure="ActionFailure"
                                OnLoad="ShowSpinner"
                                DataBound="HideSpinner"
                                OnActionBegin="OnActionBegin"
                                OnActionComplete="HideSpinner" />

                    <SfDataManager AdaptorInstance="@typeof(APIAccountsAdapter)" Adaptor="Adaptors.CustomAdaptor" />

                    <GridColumns>
                        @{
                            List<Exception> exceptions = null;
                            try
                            {
                                if (_propertyInfos.Any() == true)
                                {
                                    foreach (PropertyInfo properyInfo in _propertyInfos)
                                    {
                                        try
                                        {
                                            string field = properyInfo.Name;
                                            string header = PropertyNameConverter.ConvertFromProperty(properyInfo.Name);
                                            bool isPrimKey = properyInfo.Name == nameof(PLUserAccount.Id);
                                            bool canWrite = properyInfo.CanWrite;
                                            EditType editType = EditType.DefaultEdit;
                                            editTypeDictionairy.TryGetValue(properyInfo.PropertyType, out editType);
                                            bool isCheckBox = editType == EditType.BooleanEdit;
                                            TextAlign textAlignment = isCheckBox ? TextAlign.Center : TextAlign.Left;
                                            string width;

                                            if (editType == EditType.NumericEdit || editType == EditType.BooleanEdit)
                                                width = "30";
                                            else
                                                width = null;

                                            Debug.WriteLine($"Field: {field} | EditType: {Enum.GetName(typeof(EditType), editType)}");

                                            // Workaround so we don't remove validation of the other fields
                                            if (field == "Password")
                                            {
                                                ValidationRules _validationRules = new ValidationRules();
                                                <GridColumn Field="@header"
                                                            HeaderText="@header"
                                                            IsPrimaryKey="@isPrimKey"
                                                            IsIdentity="@isPrimKey"
                                                            EditType="@editType"
                                                            AllowEditing="@canWrite"
                                                            DisplayAsCheckBox="@isCheckBox"
                                                            TextAlign="@textAlignment"
                                                            MaxWidth="@width"
                                                            Width="@width"
                                                            ValidationRules="_validationRules" />
                                            }
                                            else
                                            {
                                                <GridColumn Field="@field"
                                                            HeaderText="@header"
                                                            IsPrimaryKey="@isPrimKey"
                                                            IsIdentity="@isPrimKey"
                                                            EditType="@editType"
                                                            AllowEditing="@canWrite"
                                                            DisplayAsCheckBox="@isCheckBox"
                                                            TextAlign="@textAlignment"
                                                            MaxWidth="@width"
                                                            Width="@width" />
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            if (exceptions == null)
                                                exceptions = new List<Exception>();

                                            exceptions.Add(ex);
                                        }
                                    }
                                }
                                else
                                {
                                    if (exceptions == null)
                                        exceptions = new List<Exception>();

                                    exceptions.Add(new ArgumentException("No properties were found in useraccount"));
                                }

                                if (exceptions != null)
                                {
                                    if (exceptions.Count > 1)
                                        throw new AggregateException(exceptions);
                                    else
                                        throw exceptions[0];
                                }

                            }
                            catch (Exception ex)
                            {
                                _toastService.ShowExceptionToast(ex);
                            }
                        }
                    </GridColumns>
                </SfGrid>
            </div>
        }

    </div>
</div>

@code{
    private string[] messages = new string[] { BlazorConstants.UNDER_CONSTRUCTION_MESSAGE_AVAILIBLE, "Shows error but works." };

    private SfGrid<PLUserAccount> _crudGrid;

    private DialogSettings _dialogSettings = new DialogSettings { MinHeight = "500px", Width = "500px" };

    private List<string> _toolBarItems { get; set; } = new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "ColumnChooser" };

    PropertyInfo[] _propertyInfos;

    private Dictionary<Type, EditType> editTypeDictionairy = new Dictionary<Type, EditType>
{
        { typeof(String), EditType.DefaultEdit },
        { typeof(Boolean), EditType.BooleanEdit },
        { typeof(Int32), EditType.NumericEdit },
        { typeof(Enum), EditType.DropDownEdit },
        { typeof(DateTime?), EditType.DateTimePickerEdit }
    };

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (_isInitialized == true)
            return;

        _spinnerService.ShowSpinner();

        _propertyInfos = typeof(PLUserAccount).GetProperties(
        BindingFlags.Public | BindingFlags.Instance)
        .Where(p => p.CanWrite == true &&
        p.PropertyType != typeof(DateTimeOffset?))
        .ToArray();

        HttpResponseMessage result = null;

        try
        {

            result = await _httpClientFactory.CreateClient(BlazorConstants.HttpClients.API).GetAsync($"{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.GET_ALL}");
        }
        catch (Exception ex)
        {
            _toastService.ShowExceptionToast(new Exception("Something went wrong while calling the server.", ex));
            return;
        }

        if (result.IsSuccessStatusCode == false)
        {
            _toastService.ShowExceptionToast(new Exception($"Call was unsuccessfull:\n{result.StatusCode}\n{result.ReasonPhrase}"));
            return;
        }

        try
        {
            APIAccountsAdapter.httpClient = _httpClientFactory.CreateClient(BlazorConstants.HttpClients.API);
            var accounts = JsonConvert.DeserializeObject<List<PLUserAccount>>(await result.Content.ReadAsStringAsync());

            APIAccountsAdapter.PLUserAccounts = accounts;
        }
        catch (Exception ex)
        {
            _toastService.ShowExceptionToast(new Exception("Something went wrong while deserializing the server response.", ex));
        }

        await base.OnInitializedAsync();

        _isInitialized = true;
    }

    public void ActionFailure(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {

        _toastService.ShowExceptionToast(new Exception($"An action failure occurred: {args.Error.ToString()}"));
    }

    // Here because of limitations of SfGrid events
    public void ShowSpinner()
    {
        _spinnerService.ShowSpinner();
    }

    public void HideSpinner()
    {
        _spinnerService.HideSpinner();
    }

    public void OnActionBegin(ActionEventArgs<PLUserAccount> args)
    {
        if (args.RequestType.HasFlag(GridActions.Filtering | GridActions.Sorting))
        {
            _spinnerService.ShowSpinner();
        }
    }
}
