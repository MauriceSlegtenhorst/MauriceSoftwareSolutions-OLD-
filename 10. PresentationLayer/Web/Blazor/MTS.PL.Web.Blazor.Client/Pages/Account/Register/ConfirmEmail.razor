@page "/account/register/confirmemail/{UserId}/{Code}"
@inject HttpClient _httpClient

<h1>Email confirmation</h1>

<h3>@messages</h3>

@if (emailIsConfirmed)
{
    <AlertComponent AlertType="@AlertComponent.AlertTypeEnum.Success" Title="Email confirmed" ContentMessages="@messages" />
}
else
{
    <AlertComponent AlertType="@AlertComponent.AlertTypeEnum.Danger" Title="Email confirmation failed" ContentMessages="@messages" />
}

<div id="container"></div>
<SfSpinner @ref="spinnerComponent" Target="#container" Label="Confirming email" />

@code {
    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string Code { get; set; }

    private bool emailIsConfirmed;
    private bool isRendering;

    private IEnumerable<string> messages;

    private SfSpinner spinnerComponent;
    private string targetSpinner = "#container";

    private IConfirmEmailHolder confirmEmailHolder;

    protected override async Task OnInitializedAsync()
    {
        spinnerComponent.ShowSpinner(targetSpinner);

        confirmEmailHolder.UserId = UserId;
        confirmEmailHolder.Code = Code;

        string uri = $"{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.CONFIRM_EMAIL}";

        var result = await _httpClient.PutAsJsonAsync(uri, confirmEmailHolder);

        string message = null;

        if (result.IsSuccessStatusCode)
        {
            message = $"Your email address has been succesfully confirmed. It might take some time before Maurice confirms your account.";
            emailIsConfirmed = true;
        }
        else
        {
            message = await result.Content.ReadAsStringAsync();
        }

        messages = new[] { message };

        spinnerComponent.HideSpinner(targetSpinner);

        await base.OnInitializedAsync();
    }
}
