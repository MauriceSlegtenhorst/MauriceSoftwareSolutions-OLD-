@page "/account/register/confirmemail"
@inject ISpinnerService _spinnerService
@inject IHttpClientFactory _httpClientFactory
@inject IToastService _toastService
@inject NavigationManager _navigationManager

<PageHeaderComponent PageName="Email confirmation" Subtitle="Validating your account" />

<div class="row col-12 padding-vertical-top">
    <div class="col-xl-2 col-lg-2 col-md-1 col-sm-1" />
    <div class="col-xl-8 col-lg-8 col-md-10 col-sm-10">
        <SfCard>
            <CardHeader>
                <h3>@_cardHeaderContent</h3>
            </CardHeader>
            <CardContent>
                <div class="row col-12">
                    <div class="col-4">
                        <p>Reading confirmation data</p>
                    </div>

                    <div class="col-4">
                        <p>Sending data to server</p>
                    </div>

                    <div class="col-4">
                        <p>Receive OK from server</p>
                    </div>
                </div>

                <SfProgressBar @ref="LinearInstance" Type="ProgressType.Linear" ID="LinearSegment"
                                Height="30" Width="100%" SegmentCount="3" GapWidth="5"
                                Value="@ProgressValue" Minimum="0" Maximum="100" CornerRadius="CornerType.Square"
                                TrackThickness="15"
                                ProgressThickness="15">
                    <ProgressBarEvents ProgressCompleted="ProgressCompleted"/>
                    <ProgressBarAnimation Enable="true" Duration="500" Delay="0" />
                </SfProgressBar>

                <div class="padding-vertical-top">
                    <AlertComponent AlertType="AlertComponent.AlertTypeEnum.Info" Title="Steps in the email verification process" ShowContentAsList="true" ContentMessages="Constants.Verification.Email.EMAIL_VERIFICATION_STEPS" />
                </div>
            </CardContent>
        </SfCard>
    </div>
    <div class="col-xl-2 col-lg-2 col-md-1 col-sm-1" />
</div>

@code {
    private SfProgressBar LinearInstance;
    private int ProgressValue;

    private string _cardHeaderContent;

    private string _userId;

    private string _code;

    protected override async Task OnInitializedAsync()
    {
        ProgressValue = 33;
        _cardHeaderContent = "Status: Unvalidated";

        Uri uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        // Workaround for long querystrings
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("userid", out var param))
        {
            _userId = param;
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var param2))
        {
            _code = param2;
        }

        object confirmEmailHolder = new
        {
            UserId = _userId,
            Code = _code
        };

        ProgressValue = 66;

        uri = new Uri($"{Constants.API_BASE_ADDRESS}/{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.CONFIRM_EMAIL}");

        var client = _httpClientFactory.CreateClient(BlazorConstants.HttpClients.API);

        StringContent content = new StringContent(JsonConvert.SerializeObject(confirmEmailHolder), Encoding.UTF8, Constants.MediaTypes.JSON);

        var result = await client.PutAsync(uri, content);

        string message = null;

        if (result.IsSuccessStatusCode)
        {
            ProgressValue = 100;
        }
        else
        {
            message = await result.Content.ReadAsStringAsync();
            _toastService.ShowExceptionToast(new Exception(message));
        }

        await base.OnInitializedAsync();
    }

    private void ProgressCompleted()
    {
        _toastService.ShowSuccessToast("Your email address has successfully been confirmed. It might take some time before Maurice confirms your account.", "Email confirmation complete");
        _cardHeaderContent = "Status: Validated. Awaiting approval";
    }
}
