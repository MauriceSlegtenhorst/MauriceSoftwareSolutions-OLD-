@page "/account/register"
@inject HttpClient httpClient
@inject ILoginService  loginService
@inject NavigationManager navigationManager
@using MTS.PL.Web.Blazor.Client.Pages.Account.Register

<h1>Register</h1>

<div id="spinnerContainer"></div>
<SfSpinner @ref="_spinner" Target="#spinnerContainer" Label="Requesting new account" />

<SfCard>
    <CardHeader Title="Please enter your details"></CardHeader>
    <CardContent>
        <EditForm Model="_credentialHolder" OnValidSubmit="CreateUser">
            <DataAnnotationsValidator />

            @if (_registrationResultErrors.Length > 0)
            {
                <ErrorAlertComponent Title="@_registrationResultToast.Title" Errors="@_registrationResultErrors" />
            }

            <div class="form-group">
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@_credentialHolder.Email" />
                    <ValidationMessage For="@(() => _credentialHolder.Email)" />
                    <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                </div>
            </div>

            <div class="form-group">
                <label>Password:</label>
                <div>
                    <InputText class="form-control" type="password" @bind-Value="@_credentialHolder.Password" />
                    <ValidationMessage For="@(() => _credentialHolder.Password)" />
                </div>
            </div>

            <SfButton Type="submit" Content="Register"></SfButton>
        </EditForm>
    </CardContent>
</SfCard>

<div class="form-control-plaintext">
    <RegisterInformationComponent />
</div>

<div class="col-lg-4 control-section">
    <SfToast @ref="_registrationResultToast" TimeOut="0" ShowCloseButton="true" ID="toast_type">
        <ToastPosition X="Center" Y="Top"></ToastPosition>
    </SfToast>
</div>

@code {
    private SfSpinner _spinner;
    private string _spinnerTarget = "#spinnerContainer";

    private SfToast _registrationResultToast;
    private string[] _registrationResultErrors = new string[0];

    private CredentialHolder _credentialHolder = new CredentialHolder();

    private ToastAnimationSettings tas = new ToastAnimationSettings();

    async Task CreateUser()
    {
        _spinner.ShowSpinner(_spinnerTarget);

        string requestUri = $"{Constants.APIControllers.ACCOUNT}/{Constants.AccountControllerEndpoints.CREATE_BY_ACCOUNT}";
        var result = await httpClient.PutAsJsonAsync<CredentialHolder>(requestUri, _credentialHolder);
        var serverMessages = JsonConvert.DeserializeObject<string[]>(await result.Content.ReadAsStringAsync());

        ToastModel toastModel;

        var stringBuilder = new StringBuilder();

        if (result.IsSuccessStatusCode)
        {
            stringBuilder.AppendLine("Please confirm your account by clicking the link we send to your email.");
            stringBuilder.AppendLine("Also, please note that it may take some time for Maurice to confirm your account.");
            stringBuilder.Append("Server: ");
            foreach (var message in serverMessages)
            {
                stringBuilder.AppendLine(message);
            }

            toastModel = new ToastModel
            {
                Title = "Account registered!",
                Content = stringBuilder.ToString(),
                CssClass = "e-toast-success",
                Icon = "e-success toast-icons",
                ShowCloseButton = true,
                TimeOut = 0
            };
        }
        else
        {
            _registrationResultErrors = serverMessages;

            toastModel = new ToastModel
            {
                Title = "Something went wrong :(",
                Content = "An error occured on the server and your account is therefore not registered.",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons",
                ShowCloseButton = true,
                TimeOut = 0
            };
        }

        _spinner.HideSpinner(_spinnerTarget);

        await _registrationResultToast.Show(toastModel);
    }
}
