@page "/credits"

@inject IHttpClientFactory _httpClientFactory
@inject ISpinnerService _spinnerService
@inject IToastService _toastService

<PageHeaderComponent PageName="Credits" Subtitle="Sites and people that helped me" />

<div class="page-body page-body-scroll-area">
    <div class="padding-vertical-top padding-vertical-bottom page-body-normal-side-padding">

        @if (_creditCategories != null)
        {
            for (int i = 0; i < _creditCategories.Length; i++)
            {
                <div class="mb-5">
                    <div class="d-block mb-2">
                        @((MarkupString)_creditCategories[i].Title)
                        @((MarkupString)_creditCategories[i].SubTitle)
                        @((MarkupString)_creditCategories[i].Description)
                    </div>

                    @{
                        leftSide = false;

                        foreach (var item in _creditCategories[i].PLCredits)
                        {
                            leftSide = !leftSide;

                            creditCss = leftSide ? String.Empty : "justify-content-end";

                            <div class="row @creditCss mb-4">
                                <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12">
                                    <CreditComponent Credit="item" />
                                </div>
                            </div>
                        }
                    }
                </div>
            }
        }

    </div>
</div>

@code {
    private PLCreditCategory[] _creditCategories;

    private bool leftSide;
    private string creditCss;

    protected override async Task OnInitializedAsync()
    {
        _creditCategories = await GetCreditCategories();

        await base.OnInitializedAsync();
    }

    private async Task<PLCreditCategory[]> GetCreditCategories()
    {
        string requestUrl = $"{Constants.APIControllers.CREDITS}/{Constants.CreditControllerEndPoints.READ_ALL_CREDIT_CATEGORY}";

        HttpResponseMessage result = null;

        try
        {
            result = await _httpClientFactory.CreateClient(BlazorConstants.HttpClients.API).GetAsync(requestUrl);
        }
        catch (Exception ex)
        {
            _toastService.ShowExceptionToast(ex);
        }

        var resultJson = await result.Content.ReadAsStringAsync();

        PLCreditCategory[] creditCategories = JsonConvert.DeserializeObject<PLCreditCategory[]>(resultJson);

        return creditCategories;
    }

    private string ConvertToId(int id)
    {
        char[] numberCharHolder = id.ToString().ToCharArray();
        int[] intHolder = new int[numberCharHolder.Length];
        StringBuilder stringBuilder = new StringBuilder();

        for (int i = 0; i < intHolder.Length; i++)
        {
            _charIntDictionairy.TryGetValue(numberCharHolder[i], out intHolder[i]);
            char convertedChar = default;
            _intCharDictionairy.TryGetValue(intHolder[i], out convertedChar);
            stringBuilder.Append(convertedChar);
        }

        return stringBuilder.ToString();
    }

    private Dictionary<int, char> _intCharDictionairy = new Dictionary<int, char>
{
        {0,'a' },
        {1,'b' },
        {2,'c' },
        {3,'d' },
        {4,'e' },
        {5,'f' },
        {6,'g' },
        {7,'h' },
        {8,'i' },
        {9,'j' }
    };

    private Dictionary<char, int> _charIntDictionairy = new Dictionary<char, int>
{
        { '0', 0 },
        { '1', 1 },
        { '2', 2 },
        { '3', 3 },
        { '4', 4 },
        { '5', 5 },
        { '6', 6 },
        { '7', 7 },
        { '8', 8 },
        { '9', 9 }
    };
}
