@page "/editpages/editindex"

@inject ISpinnerService _spinnerService
@inject IToastService _toastService
@inject IHttpClientFactory _httpClientFactory

<PageHeaderComponent PageName="Edit pages" Subtitle="Home page" />

<div class="row col-12 padding-vertical-top">
    <EditForm EditContext="@_formContext" OnValidSubmit="SubmitFormAsync">
        <!--#region Card 1 MSS-->
        <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
            <div class="e-card" ID="maurice-card">
                <!--Header-->
                <div class="e-card-header">
                    <div class="e-card-header-caption">
                        <div class="e-card-header-title">
                            <SfTextBox Type="InputType.Text" Placeholder="Title" FloatLabelType="@FloatLabelType.Always"
                                       ShowClearButton="true" @bind-Value="@_inputModel.Title1" />
                        </div>
                    </div>
                </div>
                <div class="e-card-content">

                    <SfTextBox Type="InputType.Text" Placeholder="Header 1" FloatLabelType="@FloatLabelType.Always"
                               ShowClearButton="true" @bind-Value="@_inputModel.Header1" />

                    <SfTextBox Type="InputType.Text" Placeholder="Body 1" FloatLabelType="@FloatLabelType.Always"
                               ShowClearButton="true" Multiline="true" @bind-Value="@_inputModel.Body1" />

                    <SfTextBox Type="InputType.Text" Placeholder="Header 2" FloatLabelType="@FloatLabelType.Always"
                               ShowClearButton="true" @bind-Value="@_inputModel.Header2" />

                    <SfTextBox Type="InputType.Text" Placeholder="Body 2" FloatLabelType="@FloatLabelType.Always"
                               ShowClearButton="true" Multiline="true" @bind-Value="@_inputModel.Body2" />
                </div>
            </div>
        </div>
        <!--#endregion-->
        <!--#region Card 2 Maurice-->
        <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
            <div class="e-card" ID="maurice-card">
                <!--Picture-->
                <div class="e-card-image">
                    <img id="maurice-picture" src="/Images/Maurice/pasfoto-flat.png" />
                </div>

                <!--Header-->
                <div class="e-card-header">
                    <div class="e-card-header-caption">
                        <div class="e-card-header-title">
                            <h4>Maurice Slegtenhorst</h4>
                        </div>
                        <div class="e-card-sub-title">
                            <h5>C# Software Developer</h5>
                        </div>
                    </div>
                </div>

                <!--Body-->
                <div class="e-card-content">
                    <strong>What can he do?</strong>
                    <p>@Constants.MSS.MAURICE_SKILLS</p>

                    <strong>Maurice in a nutshell</strong>
                    <p>@Constants.MSS.ABOUT_MAURICE_SHORT</p>
                </div>

                <!--Footer-->
                <div class="e-card-actions">
                    <SfButton CssClass="e-btn e-outline e-primary">LinkedIn</SfButton>
                    <SfButton CssClass="e-btn e-outline e-primary">More about</SfButton>
                </div>
            </div>
        </div>
        <!--#endregion-->
    </EditForm>
</div>

<style>
    #maurice-picture {
        max-width: 100%;
    }
</style>

@code{
    private EditContext _formContext;

    private InputModel _inputModel;

    private class InputModel
    {
        public string Title1 { get; set; } = String.Empty;

        public string Header1 { get; set; } = String.Empty;

        public string Body1 { get; set; } = String.Empty;

        public string Header2 { get; set; } = String.Empty;

        public string Body2 { get; set; } = String.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        _inputModel = new InputModel();

        _formContext = new EditContext(_inputModel);

        await GetPageDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task SubmitFormAsync()
    {
        _spinnerService.ShowSpinner("Sending page data");
    }

    private async Task GetPageDataAsync()
    {
        _spinnerService.ShowSpinner("Fetching page data");
        string requestUrl = $"{Constants.APIControllers.EDIT_PAGE}/{Constants.EditPageControllerEndpoints.GET_BY_PAGE_ROUTE}";

        HttpResponseMessage result;

        try
        {
            result = await _httpClientFactory.CreateClient(BlazorConstants.HttpClients.API).PutAsJsonAsync(requestUrl, "Index");
        }
        catch (Exception ex)
        {
            _toastService.ShowExceptionToast(ex);
            return;
        }

        if (result.IsSuccessStatusCode)
        {
            await FillInReceivedData(await result.Content.ReadAsStringAsync());
        }

        _spinnerService.HideSpinner();
    }

    private Task FillInReceivedData(string json)
    {
        Debug.WriteLine(json);
        var plPageSections = JsonConvert.DeserializeObject<List<PLPageSection>>(json);

        _inputModel.Title1 = plPageSections.First().PLSectionParts.First(p => p.Type == "Title1").Content;
        _inputModel.Header1 = plPageSections.First().PLSectionParts.First(p => p.Type == "Header1").Content;
        _inputModel.Body1 = plPageSections.First().PLSectionParts.First(p => p.Type == "Body1").Content;
        _inputModel.Header2 = plPageSections.First().PLSectionParts.First(p => p.Type == "Header2").Content;
        _inputModel.Body2 = plPageSections.First().PLSectionParts.First(p => p.Type == "Body2").Content;

        return Task.CompletedTask;
    }
}
